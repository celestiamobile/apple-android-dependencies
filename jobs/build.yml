jobs:
- job: Build
  displayName: 'Build'
  timeoutInMinutes: 120
  pool:
    vmImage: ${{ parameters.vmImage }}

  variables:
    vmImage: ${{ parameters.vmImage }}
    buildTarget: ${{ parameters.buildTarget }}
    xcodeVersion: ${{ '15.3' }}
    ndkVersion: ${{ '26.3.11579264' }}

  steps:
  - script: |
      rm -rf /usr/local/bin/2to3* /usr/local/bin/idle3* /usr/local/bin/pydoc* /usr/local/bin/python* /usr/local/share/man/man1/python* /usr/local/lib/pkgconfig/python* /usr/local/Frameworks/Python.framework
      brew install meson wget cmake zsh yasm
    displayName: 'Install Dependencies (Mac)'
    condition: contains(variables['vmImage'], 'mac')

  - script: |
      sudo apt-get install meson wget cmake zsh ncompress csh gcc-multilib yasm
    displayName: 'Install Dependencies (Ubuntu)'
    condition: contains(variables['vmImage'], 'ubuntu')

  - script: |
      chmod +x download.sh
      ./download.sh
    displayName: 'Download'

  - script: |
      if [ "$(buildTarget)" = "emscripten" ]; then
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
      elif [ "$(buildTarget)" = "visionos" ] || [ "$(buildTarget)" = "visionossim" ]; then
        APPLE_CLANG_MODULE_PATH=$(readlink -f $(brew --prefix cmake))/share/cmake/Modules/Platform/Apple-Clang.cmake
        TO_REPLACE='set(CMAKE_${lang}_OSX_DEPLOYMENT_TARGET_FLAG "-mtargetos=xros")'
        NEW_STRING=''
        sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" $APPLE_CLANG_MODULE_PATH
      fi
    displayName: 'Replace Strings'

  - script: |
      if [ "$(buildTarget)" = "emscripten" ]; then
        cd emsdk
        SDK_PATH=$(pwd)
        . ./emsdk_env.sh
        cd ..
      elif [ "$(buildTarget)" = "android" ]; then
        SDK_PATH=$ANDROID_HOME/ndk/$(ndkVersion)
      fi
      if [[ $(vmImage) = *"mac"* ]]; then
        sudo xcode-select -s /Applications/Xcode_$(xcodeVersion).app
        xcodebuild -version
      fi
      chmod +x prepare_icu.sh
      chmod +x build_$(buildTarget).sh
      ./prepare_icu.sh
      ./build_$(buildTarget).sh $(pwd)/$(buildTarget) $SDK_PATH
    displayName: 'Build'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(buildTarget)'
      ArtifactName: '$(buildTarget)'
      publishLocation: 'Container'
    displayName: 'Publish'

  - task: UniversalPackages@0
    inputs:
      command: 'publish'
      publishDirectory: '$(buildTarget)'
      feedsToUsePublish: 'internal'
      vstsFeedPublish: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackagePublish: 'celestia-$(buildTarget)-dependencies'
      versionOption: 'patch'
    condition: and(or(eq( variables['buildTarget'], 'ios' ), eq( variables['buildTarget'], 'catalyst' ), eq( variables['buildTarget'], 'android' )), eq(variables['publish'], 'true'))
